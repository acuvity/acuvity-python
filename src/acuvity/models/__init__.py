"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from typing import TYPE_CHECKING
from importlib import import_module

if TYPE_CHECKING:
    from .alertevent import Alertevent, AlerteventTypedDict
    from .analyzer import (
        Analyzer,
        AnalyzerTypedDict,
        DetectionMatchers,
        DetectionMatchersTypedDict,
    )
    from .analyzermodel import Analyzermodel, AnalyzermodelTypedDict
    from .apierror import APIError
    from .detector import Detector, DetectorTypedDict
    from .elementalerror import Data, DataTypedDict, Elementalerror, ElementalerrorData
    from .extraction import Extraction, ExtractionTypedDict
    from .extractionrequest import Extractionrequest, ExtractionrequestTypedDict
    from .extractionsummary import Extractionsummary, ExtractionsummaryTypedDict
    from .latency import Latency, LatencyTypedDict
    from .modality import Modality, ModalityTypedDict
    from .principal import AuthType, Principal, PrincipalType, PrincipalTypedDict
    from .principalapp import Principalapp, PrincipalappTypedDict
    from .principaluser import Principaluser, PrincipaluserTypedDict
    from .scanrequest import Anonymization, Scanrequest, ScanrequestTypedDict, Type
    from .scanresponse import (
        Decision,
        Scanresponse,
        ScanresponseType,
        ScanresponseTypedDict,
    )
    from .security import Security, SecurityTypedDict
    from .textualdetection import (
        Textualdetection,
        TextualdetectionType,
        TextualdetectionTypedDict,
    )

__all__ = [
    "APIError",
    "Alertevent",
    "AlerteventTypedDict",
    "Analyzer",
    "AnalyzerTypedDict",
    "Analyzermodel",
    "AnalyzermodelTypedDict",
    "Anonymization",
    "AuthType",
    "Data",
    "DataTypedDict",
    "Decision",
    "DetectionMatchers",
    "DetectionMatchersTypedDict",
    "Detector",
    "DetectorTypedDict",
    "Elementalerror",
    "ElementalerrorData",
    "Extraction",
    "ExtractionTypedDict",
    "Extractionrequest",
    "ExtractionrequestTypedDict",
    "Extractionsummary",
    "ExtractionsummaryTypedDict",
    "Latency",
    "LatencyTypedDict",
    "Modality",
    "ModalityTypedDict",
    "Principal",
    "PrincipalType",
    "PrincipalTypedDict",
    "Principalapp",
    "PrincipalappTypedDict",
    "Principaluser",
    "PrincipaluserTypedDict",
    "Scanrequest",
    "ScanrequestTypedDict",
    "Scanresponse",
    "ScanresponseType",
    "ScanresponseTypedDict",
    "Security",
    "SecurityTypedDict",
    "Textualdetection",
    "TextualdetectionType",
    "TextualdetectionTypedDict",
    "Type",
]

_dynamic_imports: dict[str, str] = {
    "Alertevent": ".alertevent",
    "AlerteventTypedDict": ".alertevent",
    "Analyzer": ".analyzer",
    "AnalyzerTypedDict": ".analyzer",
    "DetectionMatchers": ".analyzer",
    "DetectionMatchersTypedDict": ".analyzer",
    "Analyzermodel": ".analyzermodel",
    "AnalyzermodelTypedDict": ".analyzermodel",
    "APIError": ".apierror",
    "Detector": ".detector",
    "DetectorTypedDict": ".detector",
    "Data": ".elementalerror",
    "DataTypedDict": ".elementalerror",
    "Elementalerror": ".elementalerror",
    "ElementalerrorData": ".elementalerror",
    "Extraction": ".extraction",
    "ExtractionTypedDict": ".extraction",
    "Extractionrequest": ".extractionrequest",
    "ExtractionrequestTypedDict": ".extractionrequest",
    "Extractionsummary": ".extractionsummary",
    "ExtractionsummaryTypedDict": ".extractionsummary",
    "Latency": ".latency",
    "LatencyTypedDict": ".latency",
    "Modality": ".modality",
    "ModalityTypedDict": ".modality",
    "AuthType": ".principal",
    "Principal": ".principal",
    "PrincipalType": ".principal",
    "PrincipalTypedDict": ".principal",
    "Principalapp": ".principalapp",
    "PrincipalappTypedDict": ".principalapp",
    "Principaluser": ".principaluser",
    "PrincipaluserTypedDict": ".principaluser",
    "Anonymization": ".scanrequest",
    "Scanrequest": ".scanrequest",
    "ScanrequestTypedDict": ".scanrequest",
    "Type": ".scanrequest",
    "Decision": ".scanresponse",
    "Scanresponse": ".scanresponse",
    "ScanresponseType": ".scanresponse",
    "ScanresponseTypedDict": ".scanresponse",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "Textualdetection": ".textualdetection",
    "TextualdetectionType": ".textualdetection",
    "TextualdetectionTypedDict": ".textualdetection",
}


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)
