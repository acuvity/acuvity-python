lockVersion: 2.0.0
id: 463716ea-2172-44e6-ac63-a7a5b29ba606
management:
  docChecksum: 39d3599e8371d7a115c2635eb626388c
  docVersion: "1.0"
  speakeasyVersion: 1.582.0
  generationVersion: 2.657.1
  releaseVersion: 0.7.1
  configChecksum: 1d2ef3b51df42c9989059bf33d11fbcf
  published: true
features:
  python:
    additionalDependencies: 1.0.0
    constsAndDefaults: 1.0.5
    core: 5.19.4
    customCodeRegions: 0.1.1
    defaultEnabledRetries: 0.2.0
    devContainers: 3.0.0
    enumUnions: 0.1.0
    envVarSecurityUsage: 0.3.2
    examples: 3.0.2
    globalSecurity: 3.0.3
    globalSecurityCallbacks: 1.0.0
    globalServerURLs: 3.1.1
    ignores: 3.0.1
    methodArguments: 1.0.2
    nameOverrides: 3.0.1
    operationTimeout: 0.3.0
    responseFormat: 1.0.1
    retries: 3.0.2
    sdkHooks: 1.1.0
generatedFiles:
  - .devcontainer/README.md
  - .devcontainer/devcontainer.json
  - .devcontainer/setup.sh
  - .gitattributes
  - .vscode/settings.json
  - USAGE.md
  - docs/models/alertevent.md
  - docs/models/analyzer.md
  - docs/models/analyzermodel.md
  - docs/models/anonymization.md
  - docs/models/authtype.md
  - docs/models/category.md
  - docs/models/choice.md
  - docs/models/data.md
  - docs/models/decision.md
  - docs/models/detectionmatchers.md
  - docs/models/detector.md
  - docs/models/direction.md
  - docs/models/elementalerror.md
  - docs/models/extraction.md
  - docs/models/extractionrequest.md
  - docs/models/extractionsummary.md
  - docs/models/kind.md
  - docs/models/latency.md
  - docs/models/mcpmessage.md
  - docs/models/mcpmessagetype.md
  - docs/models/mcpserver.md
  - docs/models/mcptoolannotations.md
  - docs/models/modality.md
  - docs/models/principal.md
  - docs/models/principalapp.md
  - docs/models/principalexternal.md
  - docs/models/principaltype.md
  - docs/models/principaluser.md
  - docs/models/scanrequest.md
  - docs/models/scanresponse.md
  - docs/models/scanresponsetype.md
  - docs/models/security.md
  - docs/models/statuscode.md
  - docs/models/textualdetection.md
  - docs/models/textualdetectiontype.md
  - docs/models/tool.md
  - docs/models/toolchoice.md
  - docs/models/toolresult.md
  - docs/models/tooluse.md
  - docs/models/traceref.md
  - docs/models/type.md
  - docs/models/utils/retryconfig.md
  - docs/sdks/acuvity/README.md
  - docs/sdks/apex/README.md
  - poetry.toml
  - py.typed
  - pylintrc
  - pyproject.toml
  - scripts/publish.sh
  - src/acuvity/__init__.py
  - src/acuvity/_hooks/__init__.py
  - src/acuvity/_hooks/sdkhooks.py
  - src/acuvity/_hooks/types.py
  - src/acuvity/_version.py
  - src/acuvity/apex.py
  - src/acuvity/basesdk.py
  - src/acuvity/httpclient.py
  - src/acuvity/models/__init__.py
  - src/acuvity/models/acuvityerror.py
  - src/acuvity/models/alertevent.py
  - src/acuvity/models/analyzer.py
  - src/acuvity/models/analyzermodel.py
  - src/acuvity/models/apierror.py
  - src/acuvity/models/detector.py
  - src/acuvity/models/elementalerror.py
  - src/acuvity/models/extraction.py
  - src/acuvity/models/extractionrequest.py
  - src/acuvity/models/extractionsummary.py
  - src/acuvity/models/latency.py
  - src/acuvity/models/mcpmessage.py
  - src/acuvity/models/mcpserver.py
  - src/acuvity/models/mcptoolannotations.py
  - src/acuvity/models/modality.py
  - src/acuvity/models/no_response_error.py
  - src/acuvity/models/principal.py
  - src/acuvity/models/principalapp.py
  - src/acuvity/models/principalexternal.py
  - src/acuvity/models/principaluser.py
  - src/acuvity/models/responsevalidationerror.py
  - src/acuvity/models/scanrequest.py
  - src/acuvity/models/scanresponse.py
  - src/acuvity/models/security.py
  - src/acuvity/models/textualdetection.py
  - src/acuvity/models/tool.py
  - src/acuvity/models/toolchoice.py
  - src/acuvity/models/toolresult.py
  - src/acuvity/models/tooluse.py
  - src/acuvity/models/traceref.py
  - src/acuvity/py.typed
  - src/acuvity/sdk.py
  - src/acuvity/sdkconfiguration.py
  - src/acuvity/types/__init__.py
  - src/acuvity/types/basemodel.py
  - src/acuvity/utils/__init__.py
  - src/acuvity/utils/annotations.py
  - src/acuvity/utils/datetimes.py
  - src/acuvity/utils/enums.py
  - src/acuvity/utils/eventstreaming.py
  - src/acuvity/utils/forms.py
  - src/acuvity/utils/headers.py
  - src/acuvity/utils/logger.py
  - src/acuvity/utils/metadata.py
  - src/acuvity/utils/queryparams.py
  - src/acuvity/utils/requestbodies.py
  - src/acuvity/utils/retries.py
  - src/acuvity/utils/security.py
  - src/acuvity/utils/serializers.py
  - src/acuvity/utils/unmarshal_json_response.py
  - src/acuvity/utils/url.py
  - src/acuvity/utils/values.py
examples:
  get-all-Analyzers:
    speakeasy-default-get-all-analyzers:
      responses:
        "200":
          application/json: [{"detectionMatchers": [[{}]]}]
        "400":
          application/json: {}
        "500":
          application/json: {}
  create-ScanRequest-as-ScanResponse:
    speakeasy-default-create-scan-request-as-scan-response:
      requestBody:
        application/json: {"analyzers": ["Malcontents"], "annotations": {"key1": "value1", "key2": "value2"}, "anonymization": "FixedSize", "bypassHash": "6f37d752-bce1-4973-88f6-28b6c100ceb8", "extractions": [{"toolResults": [{"callID": "toolu_019X5QaEeVTDFrQPHqMMgd1n", "isError": false}], "toolUses": [{"callID": "toolu_019X5QaEeVTDFrQPHqMMgd1n", "name": "get_weather", "serverName": "deepwiki"}]}], "keywords": ["legal", "technical", "scientific"], "messages": ["Summarize the main points of this article in bullet points.", "Generate a list of creative product names for a futuristic tech gadget."], "model": "claude-3-7-sonnet", "redactions": ["person", "ssn", "location"], "tools": {"tool1": {"description": "This is a tool.", "name": "tool1"}}}
      responses:
        "200":
          application/json: {"alerts": [{"alertDefinition": "warning-notification", "principal": {"IP": "192.0.2.42", "app": {"component": "frontend", "labels": ["country=us", "another-label"], "name": "MyApp", "userClaims": ["name=John Doe", "email=john.doe@acme.com", "@validated=false"], "username": "john.doe@acme.com"}, "external": {"userClaims": ["name=John Doe", "email=john.doe@acme.com", "@validated=false"], "username": "john.doe@acme.com"}, "teams": ["admins"], "tokenName": "my-user-token", "type": "User", "user": {"name": "user@company.com"}}}], "client": "curl", "clientVersion": "7.64.1", "extractions": [{"PIIs": {"ssn": 0.8}, "categories": [{"group": "image", "type": "png"}], "confidentiality": 0.9, "customDataTypes": {"my_cdt": 1}, "dataSets": {"cds": {"ct1": 1, "ct2": 2}}, "exploits": {"prompt_injection": 0.8}, "intent": {"write": 0.8}, "keywords": {"my_keywork": 0.8}, "languages": {"english": 0.8}, "malcontents": {"toxic": 0.8}, "modalities": [{"group": "image", "type": "png"}], "relevance": 0.9, "secrets": {"credentials": 0.7}, "toolResults": [{"callID": "toolu_019X5QaEeVTDFrQPHqMMgd1n", "isError": false}], "toolUses": [{"callID": "toolu_019X5QaEeVTDFrQPHqMMgd1n", "name": "get_weather", "serverName": "deepwiki"}], "topics": {"category/enterprise": 0.7, "department/logistics": 0.8, "depict/document": 0.8, "extracted/typed_text_content": 1, "timeframe/current_year": 0.6}}], "mcpMessage": {"direction": "Client2Server", "method": "tools/call", "requestID": "2", "sessionID": "1f02aa20-22d8-6e87-8432-be15d4f7b5b2", "type": "Request"}, "model": "claude-3-7-sonnet", "principal": {"IP": "192.0.2.42", "app": {"component": "frontend", "labels": ["country=us", "another-label"], "name": "MyApp", "userClaims": ["name=John Doe", "email=john.doe@acme.com", "@validated=false"], "username": "john.doe@acme.com"}, "external": {"userClaims": ["name=John Doe", "email=john.doe@acme.com", "@validated=false"], "username": "john.doe@acme.com"}, "teams": ["admins"], "tokenName": "my-user-token", "type": "User", "user": {"name": "user@company.com"}}, "provider": "openai", "tools": {"tool1": {"description": "This is a tool.", "name": "tool1"}}, "trace": {"kind": "Server", "parentSpanID": "00f067aa0ba902b7", "spanEnd": "2025-03-22T14:35:00.123456789Z", "spanID": "6ba80aaa3b2f43d8", "spanName": "acuvity_prompt_input_analysis", "spanStart": "2025-03-22T14:35:00.123456789Z", "statusCode": "OK", "statusMessage": "Failed to make API call to service Foo.", "traceID": "4bf92f3577b34da6a3ce929d0e0e4736", "transparentSpanID": "6ba80aaa3b2f43d8"}}
        "400":
          application/json: {}
        "500":
          application/json: {}
examplesVersion: 1.0.2
generatedTests: {}
